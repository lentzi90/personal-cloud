apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: kind-deploy
spec:
  steps:
  - try:
    # Edit all apps to use the target revision instead of HEAD
    - script:
        timeout: 10s
        content: |
          sed -i "s HEAD ${TARGET_REVISION} g" apps/kind/*-app.yaml
  - try:
    # Apply cert-manager manifests
    - script:
        timeout: 1m
        content: kubectl apply -k cert-manager/overlays/kind
    - assert:
        timeout: 2m
        resource:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cert-manager-webhook
            namespace: cert-manager
          status:
            (conditions[?type == 'Available']):
            - status: 'True'
  - try:
    # Apply argocd manifests
    - script:
        timeout: 1m
        content: kubectl apply -k argocd/overlays/kind
    # Verify that the argocd-server deployment is ready
    - assert:
        timeout: 5m
        resource:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: argocd-server
            namespace: argocd
          status:
            # filter conditions array to keep elements where `type == 'Available'`
            # and assert there's a single element matching the filter
            # and that this element status is `True`
            (conditions[?type == 'Available']):
            - status: 'True'
  # cert-manager
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/cert-manager-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: cert-manager
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: cert-manager
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: cert-manager
        namespace: cert-manager
    - podLogs:
        name: cert-manager
        namespace: cert-manager
  # metallb
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/metallb-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: metallb
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: metallb
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: controller
        namespace: metallb
    - describe:
        apiVersion: v1
        kind: Pod
        name: speaker
        namespace: metallb-system
    - podLogs:
        name: controller
        namespace: metallb-system
    - podLogs:
        name: speaker
        namespace: metallb-system
  # ingress-nginx
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/ingress-nginx-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: ingress-nginx
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: ingress-nginx
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: ingress-nginx
        namespace: ingress-nginx
    - podLogs:
        name: ingress-nginx
        namespace: ingress-nginx
  # argocd - Note: won't be ready until the ingress has an external IP
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/argocd-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: argocd
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: argocd
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: argocd
        namespace: argocd
    - podLogs:
        name: argocd
        namespace: argocd
  # external-secrets
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/external-secrets-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: external-secrets
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: external-secrets
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: external-secrets
        namespace: external-secrets
    - podLogs:
        namespace: external-secrets
  - try:
    # Create secret store and token secret
    - script:
        timeout: 10s
        content: |
          kubectl -n external-secrets create secret generic bitwarden-access-token-test --from-literal=token=${BITWARDEN_ACCESS_TOKEN}
          kubectl apply -f secret-store/test-secretstore.yaml
    - assert:
        timeout: 10s
        resource:
          apiVersion: external-secrets.io/v1beta1
          kind: ClusterSecretStore
          metadata:
            name: bitwarden-test
          status:
            # filter conditions array to keep elements where `type == 'Ready'`
            # and assert there's a single element matching the filter
            # and that this element status is `True`
            (conditions[?type == 'Ready']):
            - status: 'True'
  # Cloudnatice-pg
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/cloudnative-pg-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: cloudnative-pg
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: cloudnative-pg
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: cnpg
        namespace: cnpg-system
    - podLogs:
        name: cnpg
        namespace: cnpg-system
  # hetzner-acme
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/hetzner-acme-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: hetzner-acme
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: hetzner-acme
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: cert-manager-webhook-hetzner
        namespace: cert-manager
    - podLogs:
        name: cert-manager-webhook-hetzner
        namespace: cert-manager
  # pi-hole
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/pi-hole-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: pi-hole
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: pi-hole
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: pi-hole
        namespace: pi-hole
    - podLogs:
        name: pi-hole
        namespace: pi-hole
  # minio
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/minio-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: minio
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: minio
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: minio
        namespace: minio
    - podLogs:
        namespace: minio
  # wireguard
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/wireguard-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: wireguard
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: wireguard
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: wireguard
        namespace: wireguard
    - podLogs:
        name: wireguard
        namespace: wireguard
  # jellyfin
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/jellyfin-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: jellyfin
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: jellyfin
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: jellyfin
        namespace: jellyfin
    - podLogs:
        name: jellyfin
        namespace: jellyfin
  # opencloud
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/opencloud-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: opencloud
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: opencloud
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: opencloud
        namespace: opencloud
    - podLogs:
        name: opencloud
        namespace: opencloud
  # nextcloud
  - try:
    - script:
        timeout: 10s
        content: kubectl -n argocd apply -f apps/kind/nextcloud-app.yaml
    - assert:
        timeout: 10m
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: nextcloud
            namespace: argocd
          status:
            health:
              status: Healthy
            sync:
              status: Synced
    catch:
    - describe:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        name: nextcloud
        namespace: argocd
    - describe:
        apiVersion: v1
        kind: Pod
        name: nextcloud
        namespace: nextcloud
    - podLogs:
        name: nextcloud
        namespace: nextcloud
